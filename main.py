from get_session import get_sessions
from upload_questions import Selen
import api_lms
from gen_code import Ai_tools
import time


def main():
    name = 'session'
    chrome_driver_path = r'/home/rus/Documents/project/my_project/lms-bot/chromedriver'
    code = 'print("Hello, World!")'

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    session = get_sessions(name)
    if session is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã
    courses = api_lms.get_courses(session=session)

    if courses is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã.")
        return
    
    print('–í—ã–±–µ—Ä–µ—Ç–µ –∫—É—Ä—Å:')
    for i, course in enumerate(courses):
        print(f"{i + 1}. {course['name_course']}")
        
    course_index = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞: ")) - 1
    if course_index < 0 or course_index >= len(courses):
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞.")
        return

    course_id = courses[course_index]['course_id']
    group_id = courses[course_index]['group_id']


    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏
    lesons = api_lms.get_lessons(session=session, course_id=course_id, group_id=group_id)

    if lesons is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫–∏.")
        return
    print('–í—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–∫:')

    for i, lesson in enumerate(lesons):
        print(f"{i + 1}. {lesson['title']} | {lesson['num_passed']}/{lesson['num_tasks']}")
    lesson_index = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞: ")) - 1

    if lesson_index < 0 or lesson_index >= len(lesons):
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞.")
        return
    
    lesson_id = lesons[lesson_index]['lesson_id']


    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
    tasks = api_lms.get_task(session=session, course_id=course_id, group_id=group_id, lesson_id=lesson_id)
    if tasks is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏.")
        return
    
    en_ru = {
        "control_work": '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
        "individual_work": '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
        "classwork": '–ö–ª–∞—Å—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
        "homework": '–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞',
        "additional": '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏',
        "other" : '–ü—Ä–æ—á–µ–µ'
    }

    verdict_to_smile = {
        "ok": '‚úÖÔ∏è',
        "accepted": '‚úÖÔ∏è',
        "unfinished": '‚òëÔ∏è',
        "None": '‚òëÔ∏è',
        "rework": '‚ùåÔ∏è',\
        "runtime-error": '‚ùåÔ∏è',
        "compilation-error": '‚ùåÔ∏è',
        "wrong-answer": '‚ùåÔ∏è',
        "review": 'üìù',
        "auto-review": 'üìù',
    }
    

    control_work = []
    individual_work = []
    classwork = []
    homework = []
    additional = []
    other = []

    for i in tasks:
        if i['type_work'] == 'control-work':
            control_work.append(i)
        elif i['type_work'] == 'individual-work':
            individual_work.append(i)
        elif i['type_work'] == 'classwork':
            classwork.append(i)
        elif i['type_work'] == 'homework':
            homework.append(i)
        elif i['type_work'] == 'additional':
            additional.append(i)
        else:
            other.append(i)
        works = {
            "control_work": control_work,
            "individual_work": individual_work,
            "classwork": classwork,
            "homework": homework,
            "additional": additional,
            "other": other
        }

    task_id_arr = []    

    for block_name, block_content in works.items():
        if block_content:
            print(en_ru[block_name])
            for i, task in enumerate(block_content):
                print(f"{i + 1}. {verdict_to_smile[task['verdict']]} {task['title']} | {task['get_score']}/{task['score_max']}")
                task_id_arr.append(task['task_id'])


    #  –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ solution_id 

    # https://lms.yandex.ru/courses/1177/groups/23553/lessons/6952/tasks/54180/solutions/22358142
    url = 'https://lms.yandex.ru/courses/{}/groups/{}/lessons/{}/tasks/{}/solutions/{}'

    tasks_dict = {}
    
    for i, task in enumerate(task_id_arr):
        data = api_lms.get_description(session=session, group_id=group_id, task_id=task)
        if data is None:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.")
            return

        if data['verdict'] not in ['review', 'accepted', 'ok', 'auto-review']:
            tasks_dict[task] = {
                'course_id': course_id,
                'group_id': group_id,
                'task_id': task,
                'solution_id': data['solution_id'],
                'submissions': data['submissions'],
                'verdict': data['verdict'],
                'lesson_title': data['lesson_title'],
                'title': data['title'],
                'description': data['description'],
                'lesson_url': url.format(course_id, group_id, lesson_id, task, data['solution_id'])
            }

            # if data['verdict'] in ['rework', 'runtime-error']:
            #     console_log = api_lms.get_contest_log(session=session, submissions=data['submissions'])
            #     if console_log is None:
            #         print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥.")
            #         return
                
            #     tasks_dict[task]['console_log'] = console_log

# –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞, –Ω–∞–ø–∏—Å–∞—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–ª—è NS –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
# –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ã–ª–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∑–∞–¥–∞—á–∞, –ø–µ—Ä–µ–¥–∞—Ç—å —ç—Ç–æ –≤—Å—ë –≤ upload
# –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —ë–±–∞–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≤

    lesson_url = 'https://lms.yandex.ru/courses/1177/groups/23553/lessons/6952/tasks/54180/solutions/22358142'

    print(tasks_dict)
    max_attempts = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
    try:
        selen = Selen(name, chrome_driver_path)
        ai_tools = Ai_tools()


        for id_task in tasks_dict:
            attempt_count = 0 # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
            lesson_url = tasks_dict[id_task]['lesson_url']

            lesson_title = tasks_dict[id_task]['lesson_title']
            title = tasks_dict[id_task]['title']
            description = tasks_dict[id_task]['description']
            verdict = tasks_dict[id_task]['verdict']

            # Initialize mode and NS based on verdict
            task_result = None
            mode = 'unfinished'  # default value
            NS = False  # default value

            if verdict in ['rework', 'runtime-error', 'compilation-error', 'wrong-answer']:
                mode = 'rework'
                NS = False

            elif verdict in ['None', 'unfinished', None]:
                mode = 'unfinished'
                if verdict is None:
                    # –ï—Å–ª–∏ verdict == 'None', —Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∑–∞–¥–∞—á–∞ –µ—â—ë –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∞—Å—å
                    # –ü–æ—ç—Ç–æ–º—É NS = True
                    NS = True
                else:
                    NS = False

                ai_tools.create_prompt(lesson_title=lesson_title, title=title, description=description, mode=mode)
                code = ai_tools.gen_code()

                count = 0
                while code is None and count < 10: 
                    time.sleep(5)
                    code = ai_tools.gen_code()
                    count += 1  # Don't forget to increment count
                
                if count >= 10:
                    print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞')
                    return 'Error'

                task_result = selen.upload(lesson_url, code, NS=False)
                attempt_count += 1

            # Now task_result is always defined before this check
            if task_result == '–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å':
                mode = 'rework'
            
            print(f'–†–µ–∂–∏–º: {mode}')
            print(f'verdict: {verdict}')

            while mode == 'rework':
                print(1)
                if attempt_count >= max_attempts:
                    print(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({max_attempts}) –¥–ª—è –∑–∞–¥–∞—á–∏: {title}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π.")
                    break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ while –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ

                submission = tasks_dict[id_task]['submissions']
                solution_id = tasks_dict[id_task]['solution_id']
                course_id = tasks_dict[id_task]['course_id']
                group_id = tasks_dict[id_task]['group_id']


                console_log = api_lms.get_contest_log(session=session, submissions=submission)
                comments = api_lms.get_comments(session=session, solution_id=solution_id, group_id=group_id, course_id=course_id)
                course_code = api_lms.get_source_code(session=session, solution_id=solution_id, course_id=course_id, group_id=group_id)

                ai_tools.create_prompt(lesson_title=lesson_title, title=title, description=description, mode=mode, course_code=course_code, console_log=console_log, comments=comments)
                code = ai_tools.gen_code()

                count = 0
                while code is None and count < 10: 
                    time.sleep(5)
                    print('–ø–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞')
                    code = ai_tools.gen_code()

                if count >= 10:
                    print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞')
                    return 'Error'

                task_result = selen.upload(lesson_url, code, NS=False)
                attempt_count += 1

                if task_result == '–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å':
                    mode = 'rework'
                else:
                    mode = 'finish'





    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ: {e}")
        return

if __name__ == "__main__":
    main()
